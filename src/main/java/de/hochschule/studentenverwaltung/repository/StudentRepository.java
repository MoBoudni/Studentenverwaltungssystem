package de.hochschule.studentenverwaltung.repository;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import de.hochschule.studentenverwaltung.entity.Student;

  /**
 * Repository-Klasse f√ºr Student-Datenzugriff.
 * 
 * Diese Klasse implementiert das Repository-Pattern und ist verantwortlich
 * f√ºr alle datenbankbezogenen Operationen mit Student-Entit√§ten.
 * Sie verwendet eine In-Memory H2-Datenbank f√ºr die Datenpersistierung
 * und stellt CRUD-Operationen (Create, Read, Update, Delete) bereit.
 * 
 * @author Team
 * @version 2.0
 */
public class StudentRepository {
    private static final Logger logger = LoggerFactory.getLogger(StudentRepository.class);

    /** JDBC-URL f√ºr die H2 In-Memory-Datenbank */
    private final String jdbcUrl = "jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1";
    /** Datenbankbenutzername */
    private final String username = "sa";
    /** Datenbankpasswort */
    private final String password = "";

    /**
     * Konstruktor f√ºr StudentRepository.
     * Initialisiert das Repository und erstellt die Datenbanktabelle falls n√∂tig.
     */
    public StudentRepository() {
        logger.info("Initialisiere StudentRepository und erstelle Tabelle...");
        createTableIfNotExists();
    }

    /**
     * Erstellt die Students-Tabelle falls sie noch nicht existiert.
     */
    private void createTableIfNotExists() {
        String sql = "CREATE TABLE IF NOT EXISTS students (" +
                "id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
                "first_name VARCHAR(100) NOT NULL, " +
                "last_name VARCHAR(100) NOT NULL, " +
                "email VARCHAR(100) NOT NULL UNIQUE" +
                ")";

        try (Connection conn = DriverManager.getConnection(jdbcUrl, username, password);
             Statement stmt = conn.createStatement()) {
            stmt.execute(sql);
            logger.info("Tabelle 'students' wurde erfolgreich erstellt oder existiert bereits.");
        } catch (SQLException e) {
            logger.error("FEHLER beim Erstellen der Tabelle: {}", e.getMessage(), e);
        }
    }

    /**
     * Ruft alle Studenten aus der Datenbank ab.
     */
    public List<Student> findAll() {
        List<Student> students = new ArrayList<>();
        String sql = "SELECT * FROM students";

        try (Connection conn = DriverManager.getConnection(jdbcUrl, username, password);
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            while (rs.next()) {
                Student student = new Student(
                        rs.getLong("id"),
                        rs.getString("first_name"),
                        rs.getString("last_name"),
                        rs.getString("email")
                );
                students.add(student);
            }
            logger.info("{} Student(en) aus der DB geladen.", students.size());
        } catch (SQLException e) {
            logger.error("Fehler beim Lesen aller Studenten: {}", e.getMessage(), e);
        }
        return students;
    }

    /**
     * Speichert einen Studenten in der Datenbank.
     */
    public void save(Student student) {
        String sql;
        boolean isUpdate = student.getId() != null;

        if (isUpdate) {
            sql = "UPDATE students SET first_name = ?, last_name = ?, email = ? WHERE id = ?";
        } else {
            sql = "INSERT INTO students (first_name, last_name, email) VALUES (?, ?, ?)";
        }

        try (Connection conn = DriverManager.getConnection(jdbcUrl, username, password);
             PreparedStatement pstmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {

            pstmt.setString(1, student.getFirstName());
            pstmt.setString(2, student.getLastName());
            pstmt.setString(3, student.getEmail());

            if (isUpdate) {
                pstmt.setLong(4, student.getId());
                pstmt.executeUpdate();
                logger.info("Student aktualisiert: {} {}", student.getFirstName(), student.getLastName());
            } else {
                pstmt.executeUpdate();
                try (ResultSet generatedKeys = pstmt.getGeneratedKeys()) {
                    if (generatedKeys.next()) {
                        long generatedId = generatedKeys.getLong(1);
                        student.setId(generatedId);
                        logger.info("Neuer Student gespeichert mit ID: {}", generatedId);
                    } else {
                        logger.warn("Keine generierte ID erhalten!");
                    }
                }
            }
        } catch (SQLException e) {
            logger.error("Fehler beim Speichern des Students: {}", e.getMessage(), e);
        }
    }

    /**
     * Sucht einen Studenten anhand seiner ID.
     */
    public Student findById(Long id) {
        String sql = "SELECT * FROM students WHERE id = ?";
        try (Connection conn = DriverManager.getConnection(jdbcUrl, username, password);
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setLong(1, id);
            try (ResultSet rs = pstmt.executeQuery()) {
                if (rs.next()) {
                    return new Student(
                            rs.getLong("id"),
                            rs.getString("first_name"),
                            rs.getString("last_name"),
                            rs.getString("email")
                    );
                }
            }
        } catch (SQLException e) {
            logger.error("Fehler beim Suchen des Students mit ID {}: {}", id, e.getMessage(), e);
        }
        return null;
    }

    /**
     * L√∂scht einen Studenten anhand seiner ID.
     */
    public boolean deleteById(Long id) {
        String sql = "DELETE FROM students WHERE id = ?";
        try (Connection conn = DriverManager.getConnection(jdbcUrl, username, password);
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setLong(1, id);
            int rowsAffected = pstmt.executeUpdate();
            boolean deleted = rowsAffected > 0;
            if (deleted) {
                logger.info("üóëÔ∏è Student mit ID {} erfolgreich gel√∂scht.", id);
            } else {
                logger.warn("Kein Student mit ID {} gefunden zum L√∂schen.", id);
            }
            return deleted;
        } catch (SQLException e) {
            logger.error("Fehler beim L√∂schen des Students mit ID {}: {}", id, e.getMessage(), e);
            return false;
        }
    }
}
